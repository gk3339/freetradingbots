import random
import time

class DerivTradeBot:
    def __init__(self, starting_balance, risk_per_trade=0.02, max_consecutive_losses=1):
        self.balance = starting_balance
        self.risk_per_trade = risk_per_trade  # Percentage of balance to risk per trade
        self.max_consecutive_losses = max_consecutive_losses
        self.consecutive_losses = 0  # To track consecutive losses
        self.last_trade_result = None  # Track the result of the last trade (win/loss)
    
    def calculate_trade_size(self):
        """ Calculate trade size based on risk per trade """
        trade_size = self.balance * self.risk_per_trade
        return trade_size

    def simulate_market_conditions(self):
        """ Simulate the market for backtesting purposes """
        # Simulate random win or loss (this should be replaced with a real trading signal)
        return random.choice(['win', 'loss'])

    def place_trade(self, trade_size):
        """ Simulate a trade execution (this should interact with the real API in production) """
        print(f"Placing a trade of size: {trade_size}")
        result = self.simulate_market_conditions()  # Simulate win/loss for the trade
        return result

    def handle_trade_result(self, result):
        """ Handle the result of a trade (win/loss) """
        if result == 'win':
            print("Trade won!")
            self.balance += self.calculate_trade_size()  # Add winnings to balance
            self.consecutive_losses = 0  # Reset consecutive losses
        else:
            print("Trade lost.")
            self.balance -= self.calculate_trade_size()  # Subtract loss from balance
            self.consecutive_losses += 1  # Increase consecutive losses counter

    def adjust_risk(self):
        """ Adjust trading risk based on consecutive losses """
        if self.consecutive_losses >= self.max_consecutive_losses:
            print("Max consecutive losses reached. Reducing risk for next trade.")
            self.risk_per_trade = max(0.01, self.risk_per_trade * 0.5)  # Reduce risk by 50%, but not below 1%
            self.consecutive_losses = 0  # Reset after adjustment
    
    def run(self, max_trades=100):
        """ Run the bot for a defined number of trades """
        for trade_num in range(max_trades):
            print(f"\nTrade {trade_num + 1}: Starting trade...")
            
            # Adjust risk if necessary
            self.adjust_risk()

            # Calculate the trade size based on the current risk level
            trade_size = self.calculate_trade_size()

            # Place the trade and get the result (win/loss)
            result = self.place_trade(trade_size)
            
            # Handle the result of the trade
            self.handle_trade_result(result)
            
            # Stop trading if the balance is depleted
            if self.balance <= 0:
                print("Balance depleted. Stopping trading.")
                break
            
            time.sleep(1)  # Simulate waiting for next trade

        print(f"\nFinal balance: {self.balance}")

# Usage example:
starting_balance = 1000  # Starting with $1000
bot = DerivTradeBot(starting_balance)

bot.run(max_trades=50)  # Run for 50 trades
